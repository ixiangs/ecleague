<?php

class Soul_Validation_Validator {

	private $_data = array();

	public function setData(array $value) {
		$this->_data = $value;
		return $this;
	}

	public function getData() {
		return $this->_data;
	}

	public function getValue($name) {
		if (isset($this->_data[$name])) {
			return $this->_data[$name];
		}
		return '';
	}

    public function check($name, $rules, $default = FALSE) {
        foreach ($rules as $method => $args) {
            if (!is_array($args)) {
            	if($args === TRUE){
	                if (!call_user_func_array(array($this, $method), array($name, &$out))) {
	                    return $default;
	                }
            	}else{
	                if (!call_user_func_array(array($this, $method), array($name, $args, &$out))) {
	                    return $default;
	                }
				}
            } else {
                array_unshift($args, $name);
				$args[] = &$out;
                if (!call_user_func_array(array($this, $method), $args)) {
                    return $default;
                }
            }
        }
        return $this->getValue($name);
    }

	public function notEmpty($name, $default = FALSE){
		if(Soul_Validation_Helper::notEmpty($this->getValue($name))){
			return $this->getValue($name);
		}
		return $default;
	}

	public function isInteger($name, $default = FALSE) {
		if(Soul_Validation_Helper::isInteger($this->getValue($name))){
			return $this->getValue($name);

		}
		return $default;
	}

	public function isDigit($name, $default = FALSE) {
		if(Soul_Validation_Helper::isDigit($this->getValue($name))){
			return $this->getValue($name);

		}
		return $default;
	}

	public function isNumeric($name, $default = FALSE) {
		if(Soul_Validation_Helper::isNumeric($this->getValue($name))){
			return $this->getValue($name);

		}
		return $default;
	}

	public function isEmail($name, $default = FALSE) {
		if(Soul_Validation_Helper::isEmail($this->getValue($name))){
			return $this->getValue($name);

		}
		return $default;
	}

	public function isDateTime($name, $default = FALSE) {
		if(Soul_Validation_Helper::isDateTime($this->getValue($name))){
			return $this->getValue($name);

		}
		return $default;
	}

	public function isAlpha($name, $default = FALSE) {
		if(Soul_Validation_Helper::isAlpha($this->getValue($name))){
			return $this->getValue($name);

		}
		return $default;
	}

	public function isAlphanum($name, $default = FALSE) {
		if(Soul_Validation_Helper::isAlphanum($this->getValue($name))){
			return $this->getValue($name);

		}
		return $default;
	}

	public function maxLength($name, $length, $default = FALSE) {
		if(Soul_Validation_Helper::maxLength($this->getValue($name), $length)){
			return $this->getValue($name);

		}
		return $default;
	}

	public function minLength($name, $length, $default = FALSE) {
		if(Soul_Validation_Helper::minLength($this->getValue($name), $length)){
			return $this->getValue($name);

		}
		return $default;
	}

	public function rangeLength($name, $min, $max, $default = FALSE) {
		if(Soul_Validation_Helper::rangeLength($this->getValue($name), $min, $max)){
			return $this->getValue($name);

		}
		return $default;
	}

	public function maxValue($name, $max, $default = FALSE) {
		if(Soul_Validation_Helper::maxValue($this->getValue($name), $max)){
			return $this->getValue($name);

		}
		return $default;
	}

	public function minValue($name, $min, $default = FALSE) {
		if(Soul_Validation_Helper::minValue($this->getValue($name), $min)){
			return $this->getValue($name);

		}
		return $default;
	}

	public function rangeValue($name, $min, $max, $default = FALSE) {
		if(Soul_Validation_Helper::minValue($this->rangeValue($name), $min, $max)){
			return $this->getValue($name);

		}
		return $default;
	}

	public function testRegex($name, $pattern, $default = FALSE) {
		if(Soul_Validation_Helper::testRegex($this->rangeValue($name))){
			return $this->getValue($name);

		}
		return $default;
	}

	public function isIn($name, array $values, $default = FALSE) {
		if(in_array($this->getValue($name), $values)){
			return $this->getValue($name);

		}
		return $default;
	}

}
